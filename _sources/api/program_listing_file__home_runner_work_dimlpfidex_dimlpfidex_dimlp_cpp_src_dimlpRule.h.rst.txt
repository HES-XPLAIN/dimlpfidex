
.. _program_listing_file__home_runner_work_dimlpfidex_dimlpfidex_dimlp_cpp_src_dimlpRule.h:

Program Listing for File dimlpRule.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_dimlpfidex_dimlpfidex_dimlp_cpp_src_dimlpRule.h>` (``/home/runner/work/dimlpfidex/dimlpfidex/dimlp/cpp/src/dimlpRule.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef DIMLPRULE_H
   #define DIMLPRULE_H
   
   #include <memory>
   
   
   class DimlpRule {
   
     struct Antecedent {
       int Var;                          
       float Val;                        
       char Rel;                         
       std::shared_ptr<Antecedent> Next; 
     };
   
     int NbAnt = 0; 
   
     std::shared_ptr<Antecedent> FirstAnt; 
     std::shared_ptr<Antecedent> LastAnt;  
     std::shared_ptr<Antecedent> PtrAnt;   
     std::shared_ptr<Antecedent> Memory;   
   
     //----------------------------------------------------------------
   
   public:
     int GetNbAnt() const { return NbAnt; }
   
     void GoToBeg() { PtrAnt = FirstAnt; }
   
     void GoToNext() { PtrAnt = PtrAnt->Next; }
   
     int GetVar() const { return PtrAnt->Var; }
   
     float GetVal() const { return PtrAnt->Val; }
   
     char GetRel() const { return PtrAnt->Rel; }
   
     void RemAnt() const { PtrAnt->Var = -1; }
   
     void SetAnt(int var) const { PtrAnt->Var = var; }
   
     void SetThres(float val) const { PtrAnt->Val = val; }
   
     int IsAntDeleted() const { return ((PtrAnt->Var == -1) ? 1 : 0); }
   
     void SavePtrAnt() { Memory = PtrAnt; }
   
     void PrevPtrAnt() { PtrAnt = Memory; }
   
     int GetNbAntWithout();
   
     void DeleteRule();
   
     void Insert(int var, float val, char rel);
   
     DimlpRule *Copy(std::shared_ptr<DimlpRule> r);
   
     void Del() {
       NbAnt = 0;
     }
   
     DimlpRule() = default;
   };
   
   #endif // DIMLPRULE_H
