import 'package:dimlpfidex_gui/data/field.dart';

// TODO: complete datas (must have)
// TODO: some descriptions are not sufficient

// commonly reused fields
const rootFolderFld = Field(
  "Root folder",
  "--root_folder",
  Datatype.directoryPath,
  description:
      "Folder based on main folder dimlpfidex(default folder) containg all used files and where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder.",
);

const consoleFileFld = Field(
  "Console file",
  "--console_file",
  Datatype.filePath,
  description:
      "Path of generated file that will contain the terminal output's redirection. If not specified, all output will be shown on your terminal.",
);

const List<Field> fidexFields = [
  Field("Train data file", "train_data_file", Datatype.filePath,
      isRequired: true),
  Field(
    "Train prediction file",
    "train_pred_file",
    Datatype.string,
    isRequired: false,
    description:
        "Not mendatory if predictions are specified in the test data file.",
  ),
  Field(
    "Train class file",
    "train_class_file",
    Datatype.string,
    isRequired: false,
    description:
        "Not mendatory if classes are specified in the train data file.",
  ),
  Field(
    "Test data file",
    "test_data_file",
    Datatype.string,
    isRequired: true,
    description:
        "Test sample(s) data file with data, predictions(if no test_pred_file) and classes(if no test class file has been specified).",
  ),

  Field(
    "Weight(s) file",
    "weights_file",
    Datatype.string,
    description:
        "File(s) containing weights generated by the model. In case of bagging, put prefix of files, ex: fidex, files need to be in the form fidexX.wts with X=1,2,3... You also need to specify the number of networks with the parameters 'DIMLP nets number' [Not mendatory if a rules file is given with 'Rules file']",
  ),
  Field(
    "Rules file",
    "rules_file",
    Datatype.string,
    description:
        "Rules file containing pre-made rules to be digested by the program in order to be converted in hyperlocus.",
  ),
  Field("Output rules file", "rules_outfile", Datatype.string,
      description:
          "Name of the file containing all rules that will be generated by the program.",
      isRequired: true,
      defaultValue: "output_rules.rls"),
  Field(
    "Attribute number",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
    description: "Number of attributes in your dataset.",
  ),
  Field(
    "Class number",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
    description: "Number of classes in your dataset.",
  ),

  //-OPTIONNAL PARAMS

  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "This is the default path containing every file specified by these parameters. It is optional but beware that you have to specify all absolute paths of your files if you don't use it.",
  ),
  Field(
    "DIMLP nets number",
    "nb_dimlp_nets",
    Datatype.integer,
    description:
        "Number of networks for bagging, 1 means no bagging, necessary to use bagging",
    defaultValue: "1",
    minValue: "1",
  ),
  Field("Test prediction file", "test_pred_file", Datatype.string),

  Field(
    "Test class file",
    "test_class_file",
    Datatype.string,
    description:
        "If at least 'Test prediction file' is specified, 'Test data file'needs to have only test datas and eventually classes on same line (don't add 'Test class file' in this case)",
  ),
  Field(
    "Attributes file",
    "attributes_file",
    Datatype.string,
    description: "File of attributes",
  ),
  Field(
    "Stats file",
    "stats_file",
    Datatype.string,
    description:
        "name of the file that will contain statistics about the program outputs.",
  ),
  Field(
    "Console file",
    "console_file",
    Datatype.string,
    description: "File where you redirect the terminal results.",
  ),
  Field(
    "Max # iterations",
    "max_iterations",
    Datatype.integer,
    description:
        "Maximum iteration number, also the max possible number of attributs in a rule (10 by default, should put 25 if working with images).",
    defaultValue: "10",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Min covering",
    "min_covering",
    Datatype.integer,
    description: "Minimum number of samples covered by generated rules.",
    defaultValue: "2",
    minValue: "1",
    maxValue: "Number of samples",
  ),
  Field(
    "Covering strategy",
    "covering_strategy",
    Datatype.boolean,
    description:
        "If no rule is found with 'Min covering', find best rule with best covering using dichotomic search. Decreases min_fidelity if needed (True by default)",
    defaultValue: "true",
  ),
  Field(
    "Max # failed attempts",
    "max_failed_attempts",
    Datatype.integer,
    description:
        "Maximum number of failed attempts to find a rule when covering is 1 and covering strategy is used.",
    defaultValue: "30",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Min fidelity",
    "min_fidelity",
    Datatype.doublePrecision,
    description: "Minimal rule fidelity accepted when generating a rule.",
    defaultValue: "1",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Lowest fidelity",
    "lowest_min_fidelity",
    Datatype.doublePrecision,
    description:
        "<lowest fidelity to which we agree to go down during 'Covering strategy'.",
    defaultValue: "0.75",
    minValue: "0",
    maxValue: "1",
  ),

  Field(
    "Dimension dropout",
    "dropout_dim",
    Datatype.doublePrecision,
    description: "Dimension dropout parameter.",
    defaultValue: "0",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Hyperplan dropout",
    "dropout_hyp",
    Datatype.doublePrecision,
    description: "Hyperplan dropout parameter.",
    defaultValue: "0",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "# stairs in staircase activation function",
    "nb_quant_levels",
    Datatype.integer,
    description: "Number of stairs in staircase activation function.",
    defaultValue: "50",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Decision threshold",
    "decision_threshold",
    Datatype.doublePrecision,
    description:
        "Decision threshold for predictions, need to specify the 'Positive class index' if you want to use it.",
    defaultValue: "0",
    minValue: "0",
    maxValue: "?",
  ),
  Field(
    "Positive class index",
    "positive_class_index",
    Datatype.integer,
    description:
        "Index of positive class for the usage of decision threshold (ex: 0 is for the first class).",
  ),
  Field(
    "Normalization file",
    "normalization_file",
    Datatype.string,
    description:
        "File containing the mean and standard of some attributes. Used to denormalize the rules if specified.",
  ),
  Field(
    "Mus",
    "mus",
    Datatype.listDoublePrecision,
    description:
        "List of float in the form [1.1,3.5] without spaces(!) corresponding to mean or median of each attribute index to denormalize in the rules.",
  ),
  Field(
    "Sigmas",
    "sigmas",
    Datatype.listString,
    description:
        "List of float in the form [4.5,12] without spaces(!) corresponding to standard deviation of each attribute index to denormalize in the rules.",
  ),
  Field(
    "Normalization indices",
    "normalization_indices",
    Datatype.listInteger,
    description:
        "List of integers in the form [0,3,7] without spaces(!) corresponding to attribute indices to denormalize in the rules (first column is index 0, all indices by default, only used when no normalization_file is given).",
  ),
  Field(
    "Seed",
    "seed",
    Datatype.integer,
    description:
        "Seed used to randomize generations (0 equals no generation, any other greater thant 0 is a valid seed)",
    defaultValue: "0",
    minValue: "0",
    maxValue: "9999999",
  ),
];

const List<Field> fidexGloFields = [
  Field(
    "Test data file",
    "test_data_file",
    Datatype.string,
    isRequired: true,
    description:
        "Test sample(s) data file with data and prediction(if no test_pred_file), classes may be added here if launching with fidex(--with_fidex)",
  ),
  Field(
    "Global rules file",
    "global_rules_file",
    Datatype.string,
    isRequired: true,
    description: "Ruleset input file",
  ),
  Field(
    "Number of attributes",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
    description: "Number of attributes",
  ),
  Field(
    "Number of classes",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
    description: "Number of classes",
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field(
    "Attributes file",
    "attributes_file",
    Datatype.string,
    description:
        "File of attributes. Mandatory if rules file contains attribute names, if not, do not add it",
  ),
  Field("Test prediction file", "test_pred_file", Datatype.string),
  Field("Explanation file", "explanation_file", Datatype.string),
  Field("Console file", "console_file", Datatype.string),
  Field(
    "Decision threshold",
    "decision_threshold",
    Datatype.doublePrecision,
    description:
        "Decision threshold for predictions, need to specify the index of the positive class if you want to use it (None by default)",
  ),
  Field(
    "Positive class index",
    "positive_class_index",
    Datatype.integer,
    description:
        "Index of positive class for the usage of the decision threshold (None by default, 0 for the first one)",
  ),
  Field(
    "With Fidex",
    "with_fidex",
    Datatype.boolean,
    description: "With Fidex if no rule is given (False by default)",
    defaultValue: "false",
  ),
  Field(
    "Minimal version",
    "with_minimal_version",
    Datatype.boolean,
    description:
        "Minimal version, only correct activated rules, launch Fidex when no such rule is found (if with fidex) (False by default)",
    defaultValue: "false",
  ),
  // Using Fidex
  Field("Train data file", "train_data_file", Datatype.string,
      isRequired: true),
  Field(
    "Train prediction file",
    "train_pred_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Train class file",
    "train_class_file",
    Datatype.string,
    description:
        "Not mandatory if classes are specified in the train data file",
  ),
  Field(
    "Weights file",
    "weights_file",
    Datatype.string,
    description:
        "Weights file. In case of bagging, put prefix of files, ex: dimlpBT, files need to be in the form DimlpBTi.wts, i=1,2,3,... and you need to specify the number of networks with --nb_dimlp_nets [Not mandatory if a rules file is given with --rules_file]",
  ),
  Field(
    "Rules file",
    "rules_file",
    Datatype.string,
    description: "Rules file to be converted to hyperlocus",
  ),
  // Options for Fidex
  Field("Test class file", "test_class_file", Datatype.string),
  Field(
    "Number of networks for bagging",
    "nb_dimlp_nets",
    Datatype.integer,
    description:
        "Number of networks for bagging, 1 means no bagging, necessary to use bagging (1 by default)",
    defaultValue: "1",
    minValue: "1",
    maxValue: "∞",
  ),
  Field(
    "Max iteration number",
    "max_iterations",
    Datatype.integer,
    description:
        "Max iteration number, also the max possible number of attributes in a rule (10 by default, should put 25 if working with images)",
    defaultValue: "10",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Min covering number",
    "min_covering",
    Datatype.integer,
    description: "Minimum covering number (2 by default)",
    defaultValue: "2",
    minValue: "1",
    maxValue: "Number of samples",
  ),
  Field(
    "Covering strategy",
    "covering_strategy",
    Datatype.boolean,
    description:
        "If no rule is found with min_covering, find the best rule with the best covering using dichotomic search. Decreases min_fidelity if needed (True by default)",
    defaultValue: "true",
  ),
  Field(
    "Max failed attempts",
    "max_failed_attempts",
    Datatype.integer,
    description:
        "Maximum number of failed attempts to find Fidex rule when covering is 1 and covering strategy is used (30 by default)",
    defaultValue: "30",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Min fidelity",
    "min_fidelity",
    Datatype.doublePrecision,
    description:
        "Minimal rule fidelity accepted when generating a rule [0,1] (1 by default)",
    defaultValue: "1",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Lowest min fidelity",
    "lowest_min_fidelity",
    Datatype.doublePrecision,
    description:
        "Minimal min_fidelity to which we agree to go down during covering_strategy (0.75 by default)",
    defaultValue: "0.75",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Dimension dropout parameter",
    "dropout_dim",
    Datatype.doublePrecision,
    description: "Dimension dropout parameter (None by default)",
    defaultValue: "0",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Hyperplan dropout parameter",
    "dropout_hyp",
    Datatype.doublePrecision,
    description: "Hyperplan dropout parameter (None by default)",
    defaultValue: "0",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Number of stairs in staircase activation function",
    "nb_quant_levels",
    Datatype.integer,
    description:
        "Number of stairs in staircase activation function (50 by default)",
    defaultValue: "50",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Normalization file",
    "normalization_file",
    Datatype.string,
    description:
        "File containing the mean and std of some attributes. Used to denormalize the rules if specified",
  ),
  Field(
    "Mus",
    "mus",
    Datatype.string,
    description:
        "List of float in the form [1.1,3.5] without spaces(!) corresponding to the mean or median of each attribute index to denormalize in the rules",
  ),
  Field(
    "Sigmas",
    "sigmas",
    Datatype.string,
    description:
        "List of float in the form [4.5,12] without spaces(!) corresponding to the standard deviation of each attribute index to denormalize in the rules",
  ),
  Field(
    "Normalization indices",
    "normalization_indices",
    Datatype.string,
    description:
        "List of integers in the form [0,3,7] without spaces(!) corresponding to attribute indices to denormalize in the rules (first column is index 0, all indices by default, only used when no normalization_file is given)",
  ),
  Field(
    "Seed",
    "seed",
    Datatype.integer,
    description: "Seed used to randomize generations (0=random, default)",
    defaultValue: "0",
    minValue: "0",
    maxValue: "9999999",
  ),
];

const List<Field> fidexGloRulesFields = [
  Field(
    "Train data file",
    "train_data_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Train prediction file",
    "train_pred_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Train class file",
    "train_class_file",
    Datatype.string,
    description:
        "Not mendatory if classes are specified in the train data file",
  ),
  Field(
    "Weights file",
    "weights_file",
    Datatype.string,
    description:
        "Weights file. In case of bagging, put prefix of files, ex: dimlpBT, files need to be in the form dimlpBTi.wts, i=1,2,3,... and you need to specify the number of networks with --nb_dimlp_nets [Not mendatory if a rules file is given with --rules_file]",
  ),
  Field(
    "Rules file",
    "rules_file",
    Datatype.string,
    description: "Rules file to be converted to hyperlocus",
  ),
  Field("Global rules output file", "global_rules_outfile", Datatype.string),
  Field(
    "Heuristic",
    "heuristic",
    Datatype.integer,
    description:
        "Heuristic 1: optimal fidexGlo, 2: fast fidexGlo, 3: very fast fidexGlo",
  ),
  Field(
    "Number of attributes",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
  ),
  Field(
    "Number of classes",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on the main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field(
    "Number of networks for bagging",
    "nb_dimlp_nets",
    Datatype.integer,
    description:
        "Number of networks for bagging, 1 means no bagging, necessary to use bagging (1 by default)",
    defaultValue: "1",
    minValue: "1",
    maxValue: "∞",
  ),
  Field("Attributes file", "attributes_file", Datatype.string),
  Field("Console file", "console_file", Datatype.string),
  Field(
    "Max iteration number",
    "max_iterations",
    Datatype.integer,
    description:
        "Max iteration number, also the max possible number of attributes in a rule (10 by default, should put 25 if working with images)",
    defaultValue: "10",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Min covering number",
    "min_covering",
    Datatype.integer,
    description: "Minimum covering number (2 by default)",
    defaultValue: "2",
    minValue: "1",
    maxValue: "Number of samples",
  ),
  Field("Dimension dropout", "dropout_dim", Datatype.doublePrecision),
  Field("Hyperplan dropout", "dropout_hyp", Datatype.doublePrecision),
  Field(
    "Max failed attempts",
    "max_failed_attempts",
    Datatype.integer,
    description:
        "Maximum number of failed attempts to find Fidex rule when covering is 1 (30 by default)",
    defaultValue: "30",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Number of stairs in staircase activation function",
    "nb_quant_levels",
    Datatype.integer,
    description:
        "Number of stairs in staircase activation function (50 by default)",
    defaultValue: "50",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Decision threshold",
    "decision_threshold",
    Datatype.doublePrecision,
    description:
        "Decision threshold for predictions, need to specify the index of the positive class if you want to use it (None by default)",
  ),
  Field(
    "Positive class index",
    "positive_class_index",
    Datatype.integer,
    description:
        "Index of positive class for the usage of the decision threshold (None by default, 0 for the first one)",
  ),
  Field(
    "Normalization file",
    "normalization_file",
    Datatype.string,
    description:
        "File containing the mean and std of some attributes. Used to denormalize the rules if specified",
  ),
  Field(
    "Mus",
    "mus",
    Datatype.string,
    description:
        "List of float in the form [1.1,3.5] without spaces(!) corresponding to the mean or median of each attribute index to denormalize in the rules",
  ),
  Field(
    "Sigmas",
    "sigmas",
    Datatype.string,
    description:
        "List of float in the form [4.5,12] without spaces(!) corresponding to the standard deviation of each attribute index to denormalize in the rules",
  ),
  Field(
    "Normalization indices",
    "normalization_indices",
    Datatype.string,
    description:
        "List of integers in the form [0,3,7] without spaces(!) corresponding to attribute indices to denormalize in the rules (first column is index 0, all indices by default, only used when no normalization_file is given)",
  ),
  Field(
    "Number of threads used for computing the algorithm",
    "nb_threads",
    Datatype.integer,
    description:
        "Number of threads used for computing the algorithm (default=1, this means by default it's a sequential execution)",
    defaultValue: "1",
    minValue: "1",
    maxValue: "#CPUs available",
  ),
  Field(
    "Covering strategy",
    "covering_strategy",
    Datatype.boolean,
    description:
        "If no rule is found with min_covering, find the best rule with the best covering using dichotomic search. Decreases min_fidelity if needed (True by default)",
    defaultValue: "true",
  ),
  Field(
    "Min fidelity",
    "min_fidelity",
    Datatype.doublePrecision,
    description:
        "Minimal rule fidelity accepted when generating a rule [0,1] (1 by default)",
    defaultValue: "1",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Lowest min fidelity",
    "lowest_min_fidelity",
    Datatype.doublePrecision,
    description:
        "Minimal min_fidelity to which we agree to go down when computing a rule (0.75 by default)",
    defaultValue: "0.75",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Seed",
    "seed",
    Datatype.integer,
    description: "Seed (0=random, default)",
    defaultValue: "0",
  ),
];

const List<Field> fidexGloStatsFields = [
  Field(
    "Test data file",
    "test_data_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Test prediction file",
    "test_pred_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Test class file",
    "test_class_file",
    Datatype.string,
    description: "Not mendatory if classes are specified in the test data file",
  ),
  Field(
    "Global rules input file",
    "global_rules_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Number of attributes",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
  ),
  Field(
    "Number of classes",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on the main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field(
    "Attributes file",
    "attributes_file",
    Datatype.string,
    description:
        "Mandatory if the rules file contains attribute names, if not, do not add it",
  ),
  Field("Stats output file", "stats_file", Datatype.string),
  Field(
    "Global rules output file with stats on the test set",
    "global_rules_outfile",
    Datatype.string,
    description:
        "If you want to compute statistics of global rules on the test set",
  ),
  Field(
    "Console file",
    "console_file",
    Datatype.string,
    description: "File where you redirect the terminal results if you want to",
  ),
  Field(
    "Decision threshold",
    "decision_threshold",
    Datatype.doublePrecision,
    description:
        "Decision threshold for predictions, use if it was used in FidexGlo, need to specify the index of the positive class if you want to use it (None by default)",
  ),
  Field(
    "Positive class index",
    "positive_class_index",
    Datatype.integer,
    description:
        "Index of the positive class sample to compute true/false positive/negative rates (None by default, put 0 for the first class)",
  ),
];

const List<Field> dimlpClsFields = [
  rootFolderFld,
  Field(
    "Test data file",
    "--test_data_file",
    Datatype.filePath,
    isRequired: true,
    description: "Path of file containing the test portion of the dataset.",
  ),
  Field(
    "Weights file",
    "--weights_file",
    Datatype.filePath,
    isRequired: true,
    description: "Path of file containing weights.",
  ),
  Field(
    "Number of attributes",
    "--nb_attributes",
    Datatype.integer,
    isRequired: true,
    minValue: "1",
    maxValue: "inf",
    description: "Number of input neurons.",
  ),
  Field(
    "Number of classes",
    "--nb_classes",
    Datatype.integer,
    isRequired: true,
    minValue: "2",
    maxValue: "inf",
    description: "Number of output neurons.",
  ),
  Field(
    "Hidden layers file",
    "--hidden_layers_file",
    Datatype.filePath,
    isRequired: true,
    description: "Hidden layers file name.",
  ),
  Field(
    "Test true class file",
    "--test_class_file",
    Datatype.filePath,
    description:
        "Path of file containing true classes for the test portion of the dataset.",
  ),
  Field(
    "Tests prediction output file",
    "--test_pred_outfile",
    Datatype.filePath,
    defaultValue: "dimlpTest.out",
    description:
        "Path of output file containing predictions for the tests portion of the dataset.",
  ),
  consoleFileFld,
  Field(
    "Stats file",
    "--stats_file",
    Datatype.filePath,
    description: "Path of output file name containing statistics.",
  ),
  Field(
    "First hidden layer values file",
    "--hid_file",
    Datatype.filePath,
    defaultValue: "dimlpTest.hid",
    description: "Path of output file with first hidden layer values.",
  ),
  Field(
    "Number of stairs in staircase activation function",
    "--nb_quant_levels",
    Datatype.integer,
    minValue: "3",
    maxValue: "inf",
    defaultValue: "50",
    description: "Number of stairs in staircase activation function.",
  ),
];

const List<Field> dimlpTrnFields = [
  rootFolderFld,
  Field(
    "Train data file",
    "--train_data_file",
    Datatype.filePath,
    isRequired: true,
    description: "Path of file containing the train portion of the dataset.",
  ),
  Field(
    "Number of attributes",
    "--nb_attributes",
    Datatype.integer,
    isRequired: true,
    minValue: "1",
    maxValue: "inf",
    description: "Number of input neurons.",
  ),
  Field(
    "Number of classes",
    "--nb_classes",
    Datatype.integer,
    isRequired: true,
    minValue: "2",
    maxValue: "inf",
    description: "Number of output neurons.",
  ),
  Field(
    "Attributes file",
    "--attributes_file",
    Datatype.filePath,
    description: "Path of file containing attributes names.",
  ),
  Field(
    "Validation data file",
    "--valid_data_file",
    Datatype.filePath,
    description: "Path of file containing validation data.",
  ),
  Field(
    "Test data file",
    "--test_data_file",
    Datatype.filePath,
    description: "Path of file containing the test portion of the dataset.",
  ),
  Field(
    "Pretrained weights file",
    "--weights_file",
    Datatype.filePath,
    description: "Path of file containing pretrained weights.",
  ),
  Field(
    "Train true class file",
    "--train_class_file",
    Datatype.filePath,
    description:
        "Path of file containing true classes for the train portion of the dataset.",
  ),
  Field(
    "Test true class file",
    "--test_class_file",
    Datatype.filePath,
    description:
        "Path of file containing true classes for the test portion of the dataset.",
  ),
  Field(
    "Validation true class file",
    "--valid_class_file",
    Datatype.filePath,
    description:
        "Path of file containing true classes for the validation portion of the dataset.",
  ),
  Field(
    "Output weights file name",
    "--weights_outfile",
    Datatype.filePath,
    defaultValue: "dimlp.wts",
    description: "Path/name of output weights file.",
  ),
  Field(
    "Output train prediction file",
    "--train_pred_outfile",
    Datatype.filePath,
    defaultValue: "dimlpTrain.out",
    description: "Path/name of output train prediction file.",
  ),
  Field(
    "Output test prediction file",
    "--test_pred_outfile",
    Datatype.filePath,
    defaultValue: "dimlpTest.out",
    description: "Path/name of output test prediction file.",
  ),
  Field(
    "Output validation prediction file",
    "--valid_pred_outfile",
    Datatype.filePath,
    defaultValue: "dimlpValidation.out",
    description: "Path/name of output validation prediction file.",
  ),
  consoleFileFld,
  Field(
    "Output hidden layers file",
    "--hidden_layers_outfile",
    Datatype.filePath,
    defaultValue: "hidden_layers.out",
    description: "Path/name of output hidden layers file name.",
  ),
  Field(
    "Number of neurons in the first hidden layer",
    "--first_hidden_layer",
    Datatype.integer,
    minValue: "1",
    maxValue: "inf",
    description:
        "Number of neurons in the first hidden layer. The default value should be the same as the number of attributes.",
  ),
  Field(
    "Number of neurons in each hidden layer",
    "--hidden_layers",
    Datatype.listInteger,
    minValue: "1",
    maxValue: "inf",
    description:
        "Number of neurons in each hidden layer, from the second layer through to the last.",
  ),
  Field(
    "Whether to extract rules with dimlp algorithm",
    "--with_rule_extraction",
    Datatype.boolean,
    description: "Whether to extract rules with dimlp algorithm.",
  ),
  Field(
    "Rules output file",
    "--global_rules_outfile",
    Datatype.filePath,
    description: "Path/name of rules output file.",
  ),
  Field(
    "Back-propagation learning rate",
    "--learning_rate",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "inf",
    defaultValue: "0.1",
    description: "Back-propagation learning rate parameter.",
  ),
  Field(
    "Back-propagation momentum parameter",
    "--momentum",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "inf",
    defaultValue: "0.6",
    description: "Back-propagation momentum parameter.",
  ),
  Field(
    "Back-propagation flat spot elimination",
    "--flat",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "inf",
    defaultValue: "0.1",
    description: "Back-propagation flat spot elimination parameter.",
  ),
  Field(
    "Number of stairs in staircase activation function",
    "--nb_quant_levels",
    Datatype.integer,
    minValue: "3",
    defaultValue: "50",
    maxValue: "inf",
    description: "Number of stairs in staircase activation function.",
  ),
  Field(
    "Error threshold",
    "--error_thresh",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "inf",
    description: "Error threshold to stop training.",
  ),
  Field(
    "Accuracy threshold",
    "--acc_thresh",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "1",
    description: "Accuracy threshold to stop training.",
  ),
  Field(
    "Absolute difference error threshold",
    "--abs_error_thresh",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "inf",
    defaultValue: "0",
    description:
        "Absolute difference error threshold, 0 if not using this stopping criteria.",
  ),
  Field(
    "Number of epochs",
    "--nb_epochs",
    Datatype.integer,
    minValue: "1",
    maxValue: "inf",
    defaultValue: "1500",
    description: "Number of epochs.",
  ),
  Field(
    "Number of epochs to show error",
    "--nb_epochs_error",
    Datatype.integer,
    minValue: "1",
    maxValue: "inf",
    defaultValue: "10",
    description: "Number of epochs to show error.",
  ),
  Field(
    "Normalization file",
    "--normalization_file",
    Datatype.filePath,
    description:
        "Path of file containing the mean and std of some attributes. Used to denormalize the rules if specified.",
  ),
  Field(
    "Mus",
    "--mus",
    Datatype.listDoublePrecision,
    minValue: "inf",
    maxValue: "inf",
    description:
        "Mean or median of each attribute index to denormalize in the rules.",
  ),
  Field(
    "Sigmas",
    "--sigmas",
    Datatype.listDoublePrecision,
    minValue: "inf",
    maxValue: "inf",
    description:
        "Standard deviation of each attribute index to denormalize in the rules.",
  ),
  Field(
    "Normalization indices",
    "--normalization_indices",
    Datatype.listInteger,
    minValue: "0",
    maxValue: "# attributes - 1",
    description:
        "Attribute indices to denormalize in the rules, only used when no normalization_file is given, index starts at 0 (default: [0,...,nb_attributes-1]).",
  ),
  Field(
    "Seed",
    "--seed",
    Datatype.integer,
    description:
        "Seed for random generation, 0=random. Anything else than 0 is a arbitrary seed that can be reused to obtain the same randomly generated sequence and therefore getting same results.",
  ),
];

const List<Field> dimlpPredFields = [
  rootFolderFld,
  Field(
    "Test data file",
    "--test_data_file",
    Datatype.filePath,
    isRequired: true,
    description: "Path of file containing the test portion of the dataset.",
  ),
  Field(
    "Weights file",
    "--weights_file",
    Datatype.filePath,
    isRequired: true,
    description: "Path of file containing weights.",
  ),
  Field(
    "Number of attributes",
    "--nb_attributes",
    Datatype.integer,
    isRequired: true,
    minValue: "1",
    maxValue: "inf",
    description: "Number of input neurons.",
  ),
  Field(
    "Number of classes",
    "--nb_classes",
    Datatype.integer,
    isRequired: true,
    minValue: "2",
    maxValue: "inf",
    description: "Number of output neurons.",
  ),
  Field("Hidden layers file", "--hidden-layers-file", Datatype.filePath,
      isRequired: true, description: "Path of file containing hidden layers."),
  Field(
      "Tests prediction output file", "--test_pred_outfile", Datatype.filePath,
      defaultValue: "dimlpTest.out",
      description:
          "Path of file containing the output prediction ran with the test portion of the dataset."),
  consoleFileFld,
];

const List<Field> dimlpRulFields = [
  rootFolderFld,
  Field(
    "Train data file",
    "--train_data_file",
    Datatype.filePath,
    isRequired: true,
    description: "Path of file containing the train portion of the dataset.",
  ),
  Field(
    "Weights file",
    "--weights_file",
    Datatype.filePath,
    isRequired: true,
    description: "Path of file containing weights.",
  ),
  Field(
    "Number of attributes",
    "--nb_attributes",
    Datatype.integer,
    isRequired: true,
    minValue: "1",
    maxValue: "inf",
    description: "Number of input neurons.",
  ),
  Field(
    "Number of classes",
    "--nb_classes",
    Datatype.integer,
    isRequired: true,
    minValue: "2",
    maxValue: "inf",
    description: "Number of output neurons.",
  ),
  Field(
    "Hidden layers file",
    "--hidden_layers_file",
    Datatype.filePath,
    isRequired: true,
    description: "Path of hidden layers file.",
  ),
  Field(
    "Attributes file",
    "--attributes_file",
    Datatype.filePath,
    description: "Path of file containing attributes names.",
  ),
  Field(
    "Validation data file",
    "--valid_data_file",
    Datatype.filePath,
    description: "Path of file containing validation data.",
  ),
  Field(
    "Test data file",
    "--test_data_file",
    Datatype.filePath,
    description: "Path of file containing the test portion of the dataset.",
  ),
  Field(
    "Train true class file",
    "--train_class_file",
    Datatype.filePath,
    description:
        "Path of file containing true classes for the train portion of the dataset.",
  ),
  Field(
    "Test true class file",
    "--test_class_file",
    Datatype.filePath,
    description:
        "Path of file containing true classes for the test portion of the dataset.",
  ),
  Field(
    "Validation true class file",
    "--valid_class_file",
    Datatype.filePath,
    description:
        "Path of file containing true classes for the validation portion of the dataset.",
  ),
  Field(
    "Rules output file",
    "--global_rules_outfile",
    Datatype.filePath,
    defaultValue: "dimlp.rls",
    description: "Path/name of rules output file.",
  ),
  consoleFileFld,
  Field(
    "Stats file",
    "--stats_file",
    Datatype.filePath,
    description:
        "Path/name of output file with train, test and validation accuracy.",
  ),
  Field(
    "Number of stairs in staircase activation function",
    "--nb_quant_levels",
    Datatype.integer,
    minValue: "3",
    defaultValue: "50",
    maxValue: "inf",
    description: "Number of stairs in staircase activation function.",
  ),
  Field(
    "Normalization file",
    "--normalization_file",
    Datatype.filePath,
    description:
        "File containing the mean and std of some attributes. Used to denormalize the rules if specified.",
  ),
  Field(
    "Mus",
    "--mus",
    Datatype.listDoublePrecision,
    minValue: "inf",
    maxValue: "inf",
    description:
        "Mean or median of each attribute index to denormalize in the rules.",
  ),
  Field(
    "Sigmas",
    "--sigmas",
    Datatype.listDoublePrecision,
    minValue: "inf",
    maxValue: "inf",
    description:
        "Standard deviation of each attribute index to denormalize in the rules.",
  ),
  Field(
    "Normalization indices",
    "--normalization_indices",
    Datatype.listInteger,
    minValue: "0",
    maxValue: "# attributes - 1",
    description:
        "Attribute indices to denormalize in the rules, only used when no normalization_file is given, index starts at 0 (default: [0,...,nb_attributes-1]).",
  ),
];

const List<Field> dimlpBTFields = [
  rootFolderFld,
  Field(
    "Train data file",
    "--train_data_file",
    Datatype.filePath,
    isRequired: true,
    description: "Path of train data file.",
  ),
  Field(
    "Number of attributes",
    "--nb_attributes",
    Datatype.integer,
    isRequired: true,
    minValue: "1",
    maxValue: "inf",
    description: "Number of input neurons.",
  ),
  Field(
    "Number of classes",
    "--nb_classes",
    Datatype.integer,
    isRequired: true,
    minValue: "2",
    maxValue: "inf",
    description: "Number of output neurons.",
  ),
  Field(
    "Number of networks",
    "--nb_dimlp_nets",
    Datatype.integer,
    defaultValue: "25",
    minValue: "1",
    maxValue: "inf",
    description: "Number of networks.",
  ),
  Field(
    "Attributes file",
    "--attributes_file",
    Datatype.filePath,
    description: "Path of file containing attributes.",
  ),
  Field(
    "Test data file",
    "--test_data_file",
    Datatype.filePath,
    description: "Path of test data file.",
  ),
  Field(
    "Train true class file",
    "--train_class_file",
    Datatype.filePath,
    description: "Path of train true class file.",
  ),
  Field(
    "Test true class file",
    "--test_class_file",
    Datatype.filePath,
    description: "Path of test true class file.",
  ),
  consoleFileFld,
  Field(
    "Output weights file name",
    "--weights_outfilename",
    Datatype.filePath,
    defaultValue: "dimlpBT.wts",
    description: "Path/name of output weights file.",
  ),
  Field(
    "Output train prediction file name",
    "--train_pred_outfile",
    Datatype.filePath,
    defaultValue: "dimlpBTTrain.out",
    description:
        "Path/name of output train prediction file.",
  ),
  Field(
    "Output test prediction file name",
    "--test_pred_outfile",
    Datatype.filePath,
    defaultValue: "dimlpBTTest.out",
    description: "Path/name of output test prediction file.",
  ),
  Field(
    "Output file name with train, test and validation accuracy and with the global train and test accuracy",
    "--stats_file",
    Datatype.filePath,
    description:
        "Output file name with train, test and validation accuracy and with the global train and test accuracy.",
  ),
  Field(
    "Number of neurons in the first hidden layer",
    "--first_hidden_layer",
    Datatype.integer,
    minValue: "1",
    maxValue: "inf",
    description:
        "Number of neurons in the first hidden layer (default: nb_attributes).",
  ),
  Field(
    "Number of neurons in each hidden layer",
    "--hidden_layers",
    Datatype.listInteger,
    minValue: "1",
    maxValue: "inf",
    description:
        "Number of neurons in each hidden layer, from the second layer through to the last.",
  ),
  Field(
    "Output hidden layers file name",
    "--hidden_layers_outfile",
    Datatype.filePath,
    defaultValue: "hidden_layers.out",
    description: "Output hidden layers file name (default: hidden_layers.out).",
  ),
  Field(
    "Whether to extract rules with dimlpBT algorithm",
    "--with_rule_extraction",
    Datatype.boolean,
    description: "Whether to extract rules with dimlpBT algorithm.",
  ),
  Field(
    "Rules output file",
    "--global_rules_outfile",
    Datatype.filePath,
    description: "Rules output file.",
  ),
  Field(
    "Back-propagation momentum parameter",
    "--momentum",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "inf",
    defaultValue: "0.6",
    description: "Back-propagation momentum parameter.",
  ),
  Field(
    "Back-propagation flat spot elimination parameter",
    "--flat",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "inf",
    defaultValue: "0.01",
    description: "Back-propagation flat spot elimination parameter.",
  ),
  Field(
    "Number of stairs in staircase activation function",
    "--nb_quant_levels",
    Datatype.integer,
    minValue: "3",
    maxValue: "inf",
    defaultValue: "50",
    description: "Number of stairs in staircase activation function.",
  ),
  Field(
    "Error threshold to stop training",
    "--error_thresh",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "inf",
    description: "Error threshold to stop training.",
  ),
  Field(
    "Accuracy threshold to stop training",
    "--acc_thresh",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "1",
    description: "Accuracy threshold to stop training.",
  ),
  Field(
    "Absolute difference error threshold",
    "--abs_error_thresh",
    Datatype.doublePrecision,
    minValue: "0",
    maxValue: "inf",
    description:
        "Absolute difference error threshold, 0 if not using this stopping criteria (default: 0).",
  ),
  Field(
    "Number of epochs",
    "--nb_epochs",
    Datatype.integer,
    minValue: "1",
    maxValue: "inf",
    description: "Number of epochs (default: 1500).",
  ),
  Field(
    "Number of epochs to show error",
    "--nb_epochs_error",
    Datatype.integer,
    minValue: "1",
    maxValue: "inf",
    description: "Number of epochs to show error (default: 10).",
  ),
  Field(
    "Number of examples for one single network",
    "--nb_ex_per_net",
    Datatype.integer,
    minValue: "1",
    maxValue: "inf",
    description:
        "Number of examples for one single network, 0 for all examples, it is not recommended to change this value (default: 0).",
  ),
  Field(
    "Normalization file",
    "--normalization_file",
    Datatype.filePath,
    description:
        "Path of file containing the mean and std of some attributes. Used to denormalize the rules if specified.",
  ),
  Field(
    "Mus",
    "--mus",
    Datatype.listDoublePrecision,
    minValue: "inf",
    maxValue: "inf",
    description:
        "Mean or median of each attribute index to denormalize in the rules.",
  ),
  Field(
    "Sigmas",
    "--sigmas",
    Datatype.listDoublePrecision,
    minValue: "inf",
    maxValue: "inf",
    description:
        "Standard deviation of each attribute index to denormalize in the rules.",
  ),
  Field(
    "Normalization indices",
    "--normalization_indices",
    Datatype.listInteger,
    minValue: "0",
    maxValue: "# attributes - 1",
    description:
        "Attribute indices to denormalize in the rules, only used when no normalization_file is given, index starts at 0 (default: [0,...,nb_attributes-1]).",
  ),
  Field(
    "Seed",
    "--seed",
    Datatype.integer,
    minValue: "0",
    maxValue: "inf",
    description:
        "Seed for random generation, 0=random. Anything else than 0 is a arbitrary seed that can be reused to obtain the same randomly generated sequence and therefore getting same results.",
  ),
];

const List<Field> testFields = [
  Field("Root folder path", "root_folder", Datatype.directoryPath,
      isRequired: true,
      description:
          "Folder based on main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder"),
  Field(
    "Normalization file",
    "normalization_file",
    Datatype.filePath,
    defaultValue: "normalization.txt",
  ),
  Field(
    "Random's seed",
    "seed",
    Datatype.integer,
    defaultValue: "10",
    minValue: "0",
    maxValue: "10000",
  ),
  Field(
    "Decision threshold",
    "decision_threshold",
    Datatype.doublePrecision,
    defaultValue: "2.003",
    minValue: "0.001",
    maxValue: "3.000",
  ),
  Field(
    "Using dichotomic search",
    "search-strategy",
    Datatype.boolean,
    description:
        "Whether or not to use the dichotomic search strategy, can increase speed.",
    defaultValue: "true",
  ),
  Field(
    "Mus",
    "mus",
    Datatype.listInteger,
    description: "List of integers numbers",
    defaultValue: "1,2,3,4,5",
  ),
  Field(
    "Sigmas",
    "Sigmas",
    Datatype.listDoublePrecision,
    description: "List of floating point numbers",
    defaultValue: "1.098098,2.2314124,3.45983,4.00121,5.123412",
  ),
  Field(
    "Enums",
    "enums",
    Datatype.listString,
    description: "List of words",
    defaultValue: "hello, my, name, is, test",
  ),
  Field("First hidden layer", "first-hidden-layer", Datatype.integer,
      description: "First hidden layer ")
];



// TODO Python forms