import 'package:dimlpfidex_gui/data/field.dart';

// TODO: complete datas (must have)
// TODO: there is params that are required only if others are present, maybe it should be handled
// TODO: some descriptions are not sufficient

const List<Field> fidexFields = [
  Field("Train data file", "train_data_file", Datatype.filePath,
      isRequired: true),
  Field(
    "Train prediction file",
    "train_pred_file",
    Datatype.string,
    isRequired: false,
    description:
        "Not mendatory if predictions are specified in the test data file.",
  ),
  Field(
    "Train class file",
    "train_class_file",
    Datatype.string,
    isRequired: false,
    description:
        "Not mendatory if classes are specified in the train data file.",
  ),
  Field(
    "Test data file",
    "test_data_file",
    Datatype.string,
    isRequired: true,
    description:
        "Test sample(s) data file with data, predictions(if no test_pred_file) and classes(if no test class file has been specified).",
  ),

  Field(
    "Weight(s) file",
    "weights_file",
    Datatype.string,
    description:
        "File(s) containing weights generated by the model. In case of bagging, put prefix of files, ex: fidex, files need to be in the form fidexX.wts with X=1,2,3... You also need to specify the number of networks with the parameters 'DIMLP nets number' [Not mendatory if a rules file is given with 'Rules file']",
  ),
  Field(
    "Rules file",
    "rules_file",
    Datatype.string,
    description:
        "Rules file containing pre-made rules to be digested by the program in order to be converted in hyperlocus.",
  ),
  Field("Output rules file", "rules_outfile", Datatype.string,
      description:
          "Name of the file containing all rules that will be generated by the program.",
      isRequired: true,
      defaultValue: "output_rules.rls"),
  Field(
    "Attribute number",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
    description: "Number of attributes in your dataset.",
  ),
  Field(
    "Class number",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
    description: "Number of classes in your dataset.",
  ),

  //-OPTIONNAL PARAMS

  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "This is the default path containing every file specified by these parameters. It is optional but beware that you have to specify all absolute paths of your files if you don't use it.",
  ),
  Field(
    "DIMLP nets number",
    "nb_dimlp_nets",
    Datatype.integer,
    description:
        "Number of networks for bagging, 1 means no bagging, necessary to use bagging",
    defaultValue: "1",
    minValue: "1",
  ),
  Field("Test prediction file", "test_pred_file", Datatype.string),

  Field(
    "Test class file",
    "test_class_file",
    Datatype.string,
    description:
        "If at least 'Test prediction file' is specified, 'Test data file'needs to have only test datas and eventually classes on same line (don't add 'Test class file' in this case)",
  ),
  Field(
    "Attributes file",
    "attributes_file",
    Datatype.string,
    description: "File of attributes",
  ),
  Field(
    "Stats file",
    "stats_file",
    Datatype.string,
    description:
        "name of the file that will contain statistics about the program outputs.",
  ),
  Field(
    "Console file",
    "console_file",
    Datatype.string,
    description: "File where you redirect the terminal results.",
  ),
  Field(
    "Max # iterations",
    "max_iterations",
    Datatype.integer,
    description:
        "Maximum iteration number, also the max possible number of attributs in a rule (10 by default, should put 25 if working with images).",
    defaultValue: "10",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Min covering",
    "min_covering",
    Datatype.integer,
    description: "Minimum number of samples covered by generated rules.",
    defaultValue: "2",
    minValue: "1",
    maxValue: "Number of samples",
  ),
  Field(
    "Covering strategy",
    "covering_strategy",
    Datatype.boolean,
    description:
        "If no rule is found with 'Min covering', find best rule with best covering using dichotomic search. Decreases min_fidelity if needed (True by default)",
    defaultValue: "true",
  ),
  Field(
    "Max # failed attempts",
    "max_failed_attempts",
    Datatype.integer,
    description:
        "Maximum number of failed attempts to find a rule when covering is 1 and covering strategy is used.",
    defaultValue: "30",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Min fidelity",
    "min_fidelity",
    Datatype.doublePrecision,
    description: "Minimal rule fidelity accepted when generating a rule.",
    defaultValue: "1",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Lowest fidelity",
    "lowest_min_fidelity",
    Datatype.doublePrecision,
    description:
        "<lowest fidelity to which we agree to go down during 'Covering strategy'.",
    defaultValue: "0.75",
    minValue: "0",
    maxValue: "1",
  ),

  Field(
    "Dimension dropout",
    "dropout_dim",
    Datatype.doublePrecision,
    description: "Dimension dropout parameter.",
    defaultValue: "0",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Hyperplan dropout",
    "dropout_hyp",
    Datatype.doublePrecision,
    description: "Hyperplan dropout parameter.",
    defaultValue: "0",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "# stairs in staircase activation function",
    "nb_quant_levels",
    Datatype.integer,
    description: "Number of stairs in staircase activation function.",
    defaultValue: "50",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Decision threshold",
    "decision_threshold",
    Datatype.doublePrecision,
    description:
        "Decision threshold for predictions, need to specify the 'Positive class index' if you want to use it.",
    defaultValue: "0",
    minValue: "0",
    maxValue: "?",
  ),
  Field(
    "Positive class index",
    "positive_class_index",
    Datatype.integer,
    description:
        "Index of positive class for the usage of decision threshold (ex: 0 is for the first class).",
  ),
  Field(
    "Normalization file",
    "normalization_file",
    Datatype.string,
    description:
        "File containing the mean and standard of some attributes. Used to denormalize the rules if specified.",
  ),
  Field(
    "Mus",
    "mus",
    Datatype.listDoublePrecision,
    description:
        "List of float in the form [1.1,3.5] without spaces(!) corresponding to mean or median of each attribute index to denormalize in the rules.",
  ),
  Field(
    "Sigmas",
    "sigmas",
    Datatype.listString,
    description:
        "List of float in the form [4.5,12] without spaces(!) corresponding to standard deviation of each attribute index to denormalize in the rules.",
  ),
  Field(
    "Normalization indices",
    "normalization_indices",
    Datatype.listInteger,
    description:
        "List of integers in the form [0,3,7] without spaces(!) corresponding to attribute indices to denormalize in the rules (first column is index 0, all indices by default, only used when no normalization_file is given).",
  ),
  Field(
    "Seed",
    "seed",
    Datatype.integer,
    description:
        "Seed used to randomize generations (0 equals no generation, any other greater thant 0 is a valid seed)",
    defaultValue: "0",
    minValue: "0",
    maxValue: "9999999",
  ),
];

const List<Field> fidexGloFields = [
  Field(
    "Test data file",
    "test_data_file",
    Datatype.string,
    isRequired: true,
    description:
        "Test sample(s) data file with data and prediction(if no test_pred_file), classes may be added here if launching with fidex(--with_fidex)",
  ),
  Field(
    "Global rules file",
    "global_rules_file",
    Datatype.string,
    isRequired: true,
    description: "Ruleset input file",
  ),
  Field(
    "Number of attributes",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
    description: "Number of attributes",
  ),
  Field(
    "Number of classes",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
    description: "Number of classes",
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field(
    "Attributes file",
    "attributes_file",
    Datatype.string,
    description:
        "File of attributes. Mandatory if rules file contains attribute names, if not, do not add it",
  ),
  Field("Test prediction file", "test_pred_file", Datatype.string),
  Field("Explanation file", "explanation_file", Datatype.string),
  Field("Console file", "console_file", Datatype.string),
  Field(
    "Decision threshold",
    "decision_threshold",
    Datatype.doublePrecision,
    description:
        "Decision threshold for predictions, need to specify the index of the positive class if you want to use it (None by default)",
  ),
  Field(
    "Positive class index",
    "positive_class_index",
    Datatype.integer,
    description:
        "Index of positive class for the usage of the decision threshold (None by default, 0 for the first one)",
  ),
  Field(
    "With Fidex",
    "with_fidex",
    Datatype.boolean,
    description: "With Fidex if no rule is given (False by default)",
    defaultValue: "false",
  ),
  Field(
    "Minimal version",
    "with_minimal_version",
    Datatype.boolean,
    description:
        "Minimal version, only correct activated rules, launch Fidex when no such rule is found (if with fidex) (False by default)",
    defaultValue: "false",
  ),
  // Using Fidex
  Field("Train data file", "train_data_file", Datatype.string,
      isRequired: true),
  Field(
    "Train prediction file",
    "train_pred_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Train class file",
    "train_class_file",
    Datatype.string,
    description:
        "Not mandatory if classes are specified in the train data file",
  ),
  Field(
    "Weights file",
    "weights_file",
    Datatype.string,
    description:
        "Weights file. In case of bagging, put prefix of files, ex: dimlpBT, files need to be in the form DimlpBTi.wts, i=1,2,3,... and you need to specify the number of networks with --nb_dimlp_nets [Not mandatory if a rules file is given with --rules_file]",
  ),
  Field(
    "Rules file",
    "rules_file",
    Datatype.string,
    description: "Rules file to be converted to hyperlocus",
  ),
  // Options for Fidex
  Field("Test class file", "test_class_file", Datatype.string),
  Field(
    "Number of networks for bagging",
    "nb_dimlp_nets",
    Datatype.integer,
    description:
        "Number of networks for bagging, 1 means no bagging, necessary to use bagging (1 by default)",
    defaultValue: "1",
    minValue: "1",
    maxValue: "∞",
  ),
  Field(
    "Max iteration number",
    "max_iterations",
    Datatype.integer,
    description:
        "Max iteration number, also the max possible number of attributes in a rule (10 by default, should put 25 if working with images)",
    defaultValue: "10",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Min covering number",
    "min_covering",
    Datatype.integer,
    description: "Minimum covering number (2 by default)",
    defaultValue: "2",
    minValue: "1",
    maxValue: "Number of samples",
  ),
  Field(
    "Covering strategy",
    "covering_strategy",
    Datatype.boolean,
    description:
        "If no rule is found with min_covering, find the best rule with the best covering using dichotomic search. Decreases min_fidelity if needed (True by default)",
    defaultValue: "true",
  ),
  Field(
    "Max failed attempts",
    "max_failed_attempts",
    Datatype.integer,
    description:
        "Maximum number of failed attempts to find Fidex rule when covering is 1 and covering strategy is used (30 by default)",
    defaultValue: "30",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Min fidelity",
    "min_fidelity",
    Datatype.doublePrecision,
    description:
        "Minimal rule fidelity accepted when generating a rule [0,1] (1 by default)",
    defaultValue: "1",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Lowest min fidelity",
    "lowest_min_fidelity",
    Datatype.doublePrecision,
    description:
        "Minimal min_fidelity to which we agree to go down during covering_strategy (0.75 by default)",
    defaultValue: "0.75",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Dimension dropout parameter",
    "dropout_dim",
    Datatype.doublePrecision,
    description: "Dimension dropout parameter (None by default)",
    defaultValue: "0",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Hyperplan dropout parameter",
    "dropout_hyp",
    Datatype.doublePrecision,
    description: "Hyperplan dropout parameter (None by default)",
    defaultValue: "0",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Number of stairs in staircase activation function",
    "nb_quant_levels",
    Datatype.integer,
    description:
        "Number of stairs in staircase activation function (50 by default)",
    defaultValue: "50",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Normalization file",
    "normalization_file",
    Datatype.string,
    description:
        "File containing the mean and std of some attributes. Used to denormalize the rules if specified",
  ),
  Field(
    "Mus",
    "mus",
    Datatype.string,
    description:
        "List of float in the form [1.1,3.5] without spaces(!) corresponding to the mean or median of each attribute index to denormalize in the rules",
  ),
  Field(
    "Sigmas",
    "sigmas",
    Datatype.string,
    description:
        "List of float in the form [4.5,12] without spaces(!) corresponding to the standard deviation of each attribute index to denormalize in the rules",
  ),
  Field(
    "Normalization indices",
    "normalization_indices",
    Datatype.string,
    description:
        "List of integers in the form [0,3,7] without spaces(!) corresponding to attribute indices to denormalize in the rules (first column is index 0, all indices by default, only used when no normalization_file is given)",
  ),
  Field(
    "Seed",
    "seed",
    Datatype.integer,
    description: "Seed used to randomize generations (0=random, default)",
    defaultValue: "0",
    minValue: "0",
    maxValue: "9999999",
  ),
];

const List<Field> fidexGloRulesFields = [
  Field(
    "Train data file",
    "train_data_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Train prediction file",
    "train_pred_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Train class file",
    "train_class_file",
    Datatype.string,
    description:
        "Not mendatory if classes are specified in the train data file",
  ),
  Field(
    "Weights file",
    "weights_file",
    Datatype.string,
    description:
        "Weights file. In case of bagging, put prefix of files, ex: dimlpBT, files need to be in the form dimlpBTi.wts, i=1,2,3,... and you need to specify the number of networks with --nb_dimlp_nets [Not mendatory if a rules file is given with --rules_file]",
  ),
  Field(
    "Rules file",
    "rules_file",
    Datatype.string,
    description: "Rules file to be converted to hyperlocus",
  ),
  Field("Global rules output file", "global_rules_outfile", Datatype.string),
  Field(
    "Heuristic",
    "heuristic",
    Datatype.integer,
    description:
        "Heuristic 1: optimal fidexGlo, 2: fast fidexGlo, 3: very fast fidexGlo",
  ),
  Field(
    "Number of attributes",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
  ),
  Field(
    "Number of classes",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on the main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field(
    "Number of networks for bagging",
    "nb_dimlp_nets",
    Datatype.integer,
    description:
        "Number of networks for bagging, 1 means no bagging, necessary to use bagging (1 by default)",
    defaultValue: "1",
    minValue: "1",
    maxValue: "∞",
  ),
  Field("Attributes file", "attributes_file", Datatype.string),
  Field("Console file", "console_file", Datatype.string),
  Field(
    "Max iteration number",
    "max_iterations",
    Datatype.integer,
    description:
        "Max iteration number, also the max possible number of attributes in a rule (10 by default, should put 25 if working with images)",
    defaultValue: "10",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Min covering number",
    "min_covering",
    Datatype.integer,
    description: "Minimum covering number (2 by default)",
    defaultValue: "2",
    minValue: "1",
    maxValue: "Number of samples",
  ),
  Field("Dimension dropout", "dropout_dim", Datatype.doublePrecision),
  Field("Hyperplan dropout", "dropout_hyp", Datatype.doublePrecision),
  Field(
    "Max failed attempts",
    "max_failed_attempts",
    Datatype.integer,
    description:
        "Maximum number of failed attempts to find Fidex rule when covering is 1 (30 by default)",
    defaultValue: "30",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Number of stairs in staircase activation function",
    "nb_quant_levels",
    Datatype.integer,
    description:
        "Number of stairs in staircase activation function (50 by default)",
    defaultValue: "50",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Decision threshold",
    "decision_threshold",
    Datatype.doublePrecision,
    description:
        "Decision threshold for predictions, need to specify the index of the positive class if you want to use it (None by default)",
  ),
  Field(
    "Positive class index",
    "positive_class_index",
    Datatype.integer,
    description:
        "Index of positive class for the usage of the decision threshold (None by default, 0 for the first one)",
  ),
  Field(
    "Normalization file",
    "normalization_file",
    Datatype.string,
    description:
        "File containing the mean and std of some attributes. Used to denormalize the rules if specified",
  ),
  Field(
    "Mus",
    "mus",
    Datatype.string,
    description:
        "List of float in the form [1.1,3.5] without spaces(!) corresponding to the mean or median of each attribute index to denormalize in the rules",
  ),
  Field(
    "Sigmas",
    "sigmas",
    Datatype.string,
    description:
        "List of float in the form [4.5,12] without spaces(!) corresponding to the standard deviation of each attribute index to denormalize in the rules",
  ),
  Field(
    "Normalization indices",
    "normalization_indices",
    Datatype.string,
    description:
        "List of integers in the form [0,3,7] without spaces(!) corresponding to attribute indices to denormalize in the rules (first column is index 0, all indices by default, only used when no normalization_file is given)",
  ),
  Field(
    "Number of threads used for computing the algorithm",
    "nb_threads",
    Datatype.integer,
    description:
        "Number of threads used for computing the algorithm (default=1, this means by default it's a sequential execution)",
    defaultValue: "1",
    minValue: "1",
    maxValue: "#CPUs available",
  ),
  Field(
    "Covering strategy",
    "covering_strategy",
    Datatype.boolean,
    description:
        "If no rule is found with min_covering, find the best rule with the best covering using dichotomic search. Decreases min_fidelity if needed (True by default)",
    defaultValue: "true",
  ),
  Field(
    "Min fidelity",
    "min_fidelity",
    Datatype.doublePrecision,
    description:
        "Minimal rule fidelity accepted when generating a rule [0,1] (1 by default)",
    defaultValue: "1",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Lowest min fidelity",
    "lowest_min_fidelity",
    Datatype.doublePrecision,
    description:
        "Minimal min_fidelity to which we agree to go down when computing a rule (0.75 by default)",
    defaultValue: "0.75",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Seed",
    "seed",
    Datatype.integer,
    description: "Seed (0=random, default)",
    defaultValue: "0",
  ),
];

const List<Field> fidexGloStatsFields = [
  Field(
    "Test data file",
    "test_data_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Test prediction file",
    "test_pred_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Test class file",
    "test_class_file",
    Datatype.string,
    description: "Not mendatory if classes are specified in the test data file",
  ),
  Field(
    "Global rules input file",
    "global_rules_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Number of attributes",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
  ),
  Field(
    "Number of classes",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on the main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field(
    "Attributes file",
    "attributes_file",
    Datatype.string,
    description:
        "Mandatory if the rules file contains attribute names, if not, do not add it",
  ),
  Field("Stats output file", "stats_file", Datatype.string),
  Field(
    "Global rules output file with stats on the test set",
    "global_rules_outfile",
    Datatype.string,
    description:
        "If you want to compute statistics of global rules on the test set",
  ),
  Field(
    "Console file",
    "console_file",
    Datatype.string,
    description: "File where you redirect the terminal results if you want to",
  ),
  Field(
    "Decision threshold",
    "decision_threshold",
    Datatype.doublePrecision,
    description:
        "Decision threshold for predictions, use if it was used in FidexGlo, need to specify the index of the positive class if you want to use it (None by default)",
  ),
  Field(
    "Positive class index",
    "positive_class_index",
    Datatype.integer,
    description:
        "Index of the positive class sample to compute true/false positive/negative rates (None by default, put 0 for the first class)",
  ),
];

const List<Field> dimlpClsFields = [
  Field(
    "Test set file",
    "test_data_file",
    Datatype.string,
    isRequired: true,
    description: "Path with respect to the specified root folder",
  ),
  Field(
    "Weights file",
    "weights_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Number of input neurons",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
  ),
  Field(
    "Number of output neurons",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on the main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field("File of classes", "test_class_file", Datatype.string),
  Field(
    "Output prediction file",
    "test_pred_outfile",
    Datatype.string,
    defaultValue: "dimlp.out",
  ),
  Field(
    "Console file",
    "console_file",
    Datatype.string,
    description: "File where you redirect the terminal results if you want to",
  ),
  Field(
    "Output file with test accuracy",
    "stats_file",
    Datatype.string,
  ),
  Field(
    "Output file with first hidden layer values",
    "hid_file",
    Datatype.string,
    defaultValue: "dimlp.hid",
  ),
  Field(
    "Number of neurons in the first hidden layer",
    "h1",
    Datatype.integer,
    description:
        "If not specified, this number will be equal to the number of input neurons",
  ),
  Field(
    "Number of neurons in the kth hidden layer",
    "hk",
    Datatype.integer,
  ),
  Field(
    "Number of stairs in staircase activation function",
    "nb_quant_levels",
    Datatype.integer,
    defaultValue: "50",
  ),
];

const List<Field> dimlpTrnFields = [
  Field(
    "Training set file (path with respect to specified root folder)",
    "train_data_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Number of input neurons",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
  ),
  Field(
    "Number of output neurons",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on the main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field(
    "File of attributes",
    "attributes_file",
    Datatype.string,
  ),
  Field(
    "Validation set file",
    "valid_data_file",
    Datatype.string,
  ),
  Field(
    "Testing set file",
    "test_data_file",
    Datatype.string,
  ),
  Field(
    "File of pretrained weights",
    "weights_file",
    Datatype.string,
  ),
  Field(
    "File of train classes",
    "train_class_file",
    Datatype.string,
  ),
  Field(
    "File of test classes",
    "test_class_file",
    Datatype.string,
  ),
  Field(
    "File of validation classes",
    "valid_class_file",
    Datatype.string,
  ),
  Field(
    "Output weight file",
    "weights_outfile",
    Datatype.string,
    defaultValue: "dimlp.wts",
  ),
  Field(
    "Output train prediction file",
    "train_pred_outfile",
    Datatype.string,
    defaultValue: "dimlpTrain.out",
  ),
  Field(
    "Output test prediction file",
    "test_pred_outfile",
    Datatype.string,
    defaultValue: "dimlpTest.out",
  ),
  Field(
    "Output validation prediction file",
    "valid_pred_outfile",
    Datatype.string,
    defaultValue: "dimlpValidation.out",
  ),
  Field(
    "File where you redirect console result",
    "console_file",
    Datatype.string,
  ),
  Field(
    "Output file with train, test and validation accuracy",
    "stats_file",
    Datatype.string,
  ),
  Field(
    "Number of neurons in the first hidden layer",
    "H1",
    Datatype.integer,
  ),
  Field(
    "Number of neurons in the kth hidden layer",
    "Hk",
    Datatype.integer,
  ),
  Field(
    "Rule extraction (RULE EXTRACTION)",
    "with_rule_extraction",
    Datatype.boolean,
  ),
  Field(
    "Extraction ruleFile",
    "global_rules_outfile",
    Datatype.string,
    description:
        "If you want to extract rules in a rulesFile instead of the console",
  ),
  Field(
    "Back-propagation learning parameter (Eta, 0.1 by default)",
    "learning_rate",
    Datatype.doublePrecision,
    defaultValue: "0.1",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Back-propagation momentum parameter (Mu, 0.6 by default)",
    "momentum",
    Datatype.doublePrecision,
    defaultValue: "0.6",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Back-propagation flat spot elimination parameter (Flat, 0.01 by default)",
    "flat",
    Datatype.doublePrecision,
    defaultValue: "0.01",
    minValue: "0",
    maxValue: "1",
  ),
  Field(
    "Number of stairs in staircase activation function (50 by default)",
    "nb_quant_levels",
    Datatype.integer,
    defaultValue: "50",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Error threshold (None by default )",
    "error_thresh",
    Datatype.doublePrecision,
  ),
  Field(
    "Accuracy threshold (None by default)",
    "acc_thresh",
    Datatype.doublePrecision,
  ),
  Field(
    "Absolute difference error threshold (0 by default)",
    "abs_error_thresh",
    Datatype.doublePrecision,
    defaultValue: "0",
  ),
  Field(
    "Number of epochs (1500 by default)",
    "nb_epochs",
    Datatype.integer,
    defaultValue: "1500",
  ),
  Field(
    "Number of epochs to show error (10 by default)",
    "nb_epochs_error",
    Datatype.integer,
    defaultValue: "10",
  ),
  Field(
    "File containing the mean and std of some attributes. Used to denormalize the rules if specified",
    "normalization_file",
    Datatype.string,
  ),
  Field(
    "List of float in the form [1.1,3.5] without spaces(!) corresponding to mean or median of each attribute index to denormalize in the rules",
    "mus",
    Datatype.string,
  ),
  Field(
    "List of float in the form [4.5,12] without spaces(!) corresponding to standard deviation of each attribute index to denormalize in the rules",
    "sigmas",
    Datatype.string,
  ),
  Field(
    "List of integers in the form [0,3,7] without spaces(!) corresponding to attribute indices to denormalize in the rules (first column is index 0, all indices by default, only used when no normalization_file is given)",
    "normalization_indices",
    Datatype.string,
  ),
  Field(
    "Seed (0=random, default)",
    "seed",
    Datatype.integer,
    defaultValue: "0",
    minValue: "0",
    maxValue: "9999999",
  ),
];

const List<Field> dimlpPredFields = [
  Field(
    "Test set file (path with respect to specified root folder)",
    "test_data_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "File of weights",
    "weights_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Number of input neurons",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
  ),
  Field(
    "Number of output neurons",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on the main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field(
    "Output prediction file",
    "test_pred_outfile",
    Datatype.string,
    defaultValue: "dimlpTest.out",
  ),
  Field(
    "File where you redirect console result",
    "console_file",
    Datatype.string,
  ),
  Field(
    "Number of neurons in the first hidden layer",
    "H1",
    Datatype.integer,
  ),
  Field(
    "Number of neurons in the kth hidden layer",
    "Hk",
    Datatype.integer,
  ),
  Field(
    "Number of stairs in staircase activation function (50 by default)",
    "nb_quant_levels",
    Datatype.integer,
    defaultValue: "50",
    minValue: "1",
    maxValue: "1000",
  ),
];

const List<Field> dimlpRulFields = [
  Field(
    "Training set file (path with respect to specified root folder)",
    "train_data_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "File of weights",
    "weights_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Number of input neurons",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
  ),
  Field(
    "Number of output neurons",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on the main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field(
    "File of attributes",
    "attributes_file",
    Datatype.string,
  ),
  Field(
    "Validation set file",
    "valid_data_file",
    Datatype.string,
  ),
  Field(
    "Testing set file",
    "test_data_file",
    Datatype.string,
  ),
  Field(
    "File of train classes",
    "train_class_file",
    Datatype.string,
  ),
  Field(
    "File of test classes",
    "test_class_file",
    Datatype.string,
  ),
  Field(
    "File of validation classes",
    "valid_class_file",
    Datatype.string,
  ),
  Field(
    "RulesFile (dimlp.rls by default)",
    "global_rules_outfile",
    Datatype.string,
    defaultValue: "dimlp.rls",
  ),
  Field(
    "File where you redirect console result",
    "console_file",
    Datatype.string,
  ),
  Field(
    "Output file with train, test, and validation accuracy",
    "stats_file",
    Datatype.string,
  ),
  Field(
    "Number of neurons in the first hidden layer",
    "H1",
    Datatype.integer,
  ),
  Field(
    "Number of neurons in the kth hidden layer",
    "Hk",
    Datatype.integer,
  ),
  Field(
    "Number of stairs in staircase activation function (50 by default)",
    "nb_quant_levels",
    Datatype.integer,
    defaultValue: "50",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "File containing the mean and std of some attributes. Used to denormalize the rules if specified",
    "normalization_file",
    Datatype.string,
  ),
  Field(
    "List of float in the form [1.1,3.5] without spaces(!) corresponding to mean or median of each attribute index to denormalize in the rules",
    "mus",
    Datatype.string,
  ),
  Field(
    "List of float in the form [4.5,12] without spaces(!) corresponding to standard deviation of each attribute index to denormalize in the rules",
    "sigmas",
    Datatype.string,
  ),
  Field(
    "List of integers in the form [0,3,7] without spaces(!) corresponding to attribute indices to denormalize in the rules (first column is index 0, all indices by default, only used when no normalization_file is given)",
    "normalization_indices",
    Datatype.string,
  ),
];

const List<Field> dimlpBTFields = [
  Field(
    "Train data file",
    "train_data_file",
    Datatype.string,
    isRequired: true,
  ),
  Field(
    "Number of input neurons",
    "nb_attributes",
    Datatype.integer,
    isRequired: true,
  ),
  Field(
    "Number of output neurons",
    "nb_classes",
    Datatype.integer,
    isRequired: true,
  ),
  // Options
  Field(
    "Root folder",
    "root_folder",
    Datatype.directoryPath,
    description:
        "Folder based on the main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder",
  ),
  Field(
    "Number of networks",
    "nb_dimlp_nets",
    Datatype.integer,
    defaultValue: "25",
  ),
  Field(
    "File of attributes names",
    "attributes_file",
    Datatype.string,
  ),
  Field(
    "Test data file",
    "test_data_file",
    Datatype.string,
  ),
  Field(
    "File of train classes",
    "train_class_file",
    Datatype.string,
  ),
  Field(
    "File of test classes",
    "test_class_file",
    Datatype.string,
  ),
  Field(
    "Console file",
    "console_file",
    Datatype.string,
  ),
  Field(
    "Output weights filename",
    "weights_generic_outfilename",
    Datatype.string,
    description:
        "This allows to define a generic name of generated files if bagging is enabled.\nExample: for the value 'weights_file', the output will be 'weights_file1.wts', 'weights_file2.wts' and so on.",
    defaultValue: "dimlpBT",
  ),
  Field(
    "Output train prediction file",
    "train_pred_outfile",
    Datatype.string,
    defaultValue: "dimlpBTTrain.out",
  ),
  Field(
    "Output test prediction file",
    "test_pred_outfile",
    Datatype.string,
    defaultValue: "dimlpBTTest.out",
  ),
  Field("Stats file", "stats_file", Datatype.string,
      description:
          "Output file with train, test, and validation accuracy and with the global accuracy for train and test."),
  Field(
    "Number of neurons in the first hidden layer",
    "H1",
    Datatype.integer,
  ),
  Field(
    "Number of neurons in the kth hidden layer",
    "Hk",
    Datatype.integer,
  ),
  Field(
    "With rule extraction",
    "with_rule_extraction",
    Datatype.boolean,
  ),
  Field(
    "Global rules output files",
    "global_rules_outfile",
    Datatype.string,
  ),
  Field("Learning rate", "learning_rate", Datatype.doublePrecision,
      defaultValue: "0.1", description: "Back-propagation learning parameter"),
  Field(
    "Momentum",
    "momentum",
    Datatype.doublePrecision,
    defaultValue: "0.6",
    description: "Back-propagation momentum parameter (Mu, 0.6 by default)",
  ),
  Field(
    "Flat",
    "flat",
    Datatype.doublePrecision,
    defaultValue: "0.01",
    description: "Back-propagation flat spot elimination parameter.",
  ),
  Field(
    "Number of stairs in the staircase activation",
    "nb_quant_levels",
    Datatype.integer,
    description:
        "Number of stairs in the staircase activation function (50 by default)",
    defaultValue: "50",
    minValue: "1",
    maxValue: "1000",
  ),
  Field(
    "Error threshold",
    "error_thresh",
    Datatype.doublePrecision,
  ),
  Field(
    "Accuracy threshold",
    "acc_thresh",
    Datatype.doublePrecision,
  ),
  Field(
    "Absolute difference error threshold",
    "abs_error_thresh",
    Datatype.doublePrecision,
  ),
  Field(
    "Number of epochs",
    "nb_epochs",
    Datatype.integer,
    defaultValue: "0",
    minValue: "0",
  ),
  Field(
    "Number of epochs to show error",
    "nb_epochs_error",
    Datatype.integer,
    defaultValue: "1500",
  ),
  Field(
    "Number of examples for one single network",
    "nb_ex_per_net",
    Datatype.integer,
    description: "It is recommended to not change this value",
    defaultValue: "0",
  ),
  Field(
    "Normalization file",
    "normalization_file",
    Datatype.string,
    description:
        "File containing the mean and standard of some attributes. Used to denormalize the rules if specified",
  ),
  Field(
    "Mus",
    "mus",
    Datatype.listDoublePrecision,
    description:
        "List of float (ex: '1.1, 3.5, 2.0') corresponding to mean or median of each attribute index to denormalize in the rules",
  ),
  Field(
    "Sigmas",
    "sigmas",
    Datatype.listDoublePrecision,
    description:
        "List of float (ex: '4.5, 12.1, 30.9') corresponding to standard deviation of each attribute index to denormalize in the rules",
  ),
  Field(
    "Normalization indices",
    "normalization_indices",
    Datatype.listDoublePrecision,
    description:
        "List of integers (ex: '0, 3, 7') corresponding to attribute indices to denormalize in the rules (first column is index 0, all indices by default, only used when no normalization_file is given)",
  ),
  Field(
    "Seed",
    "seed",
    Datatype.integer,
    defaultValue: "0",
    minValue: "1",
    maxValue: "999999",
  ),
];

const List<Field> testFields = [
  Field("Root folder path", "root_folder", Datatype.directoryPath,
      isRequired: true,
      description:
          "Folder based on main folder dimlpfidex(default folder) where generated files will be saved. If a file name is specified with another option, his path will be configured with respect to this root folder"),
  Field(
    "Normalization file",
    "normalization_file",
    Datatype.filePath,
    defaultValue: "normalization.txt",
  ),
  Field(
    "Random's seed",
    "seed",
    Datatype.integer,
    defaultValue: "10",
    minValue: "0",
    maxValue: "10000",
  ),
  Field(
    "Decision threshold",
    "decision_threshold",
    Datatype.doublePrecision,
    defaultValue: "2.003",
    minValue: "0.001",
    maxValue: "3.000",
  ),
  Field(
    "Using dichotomic search",
    "search-strategy",
    Datatype.boolean,
    description:
        "Whether or not to use the dichotomic search strategy, can increase speed.",
    defaultValue: "true",
  ),
  Field(
    "Mus",
    "mus",
    Datatype.listInteger,
    description: "List of integers numbers",
    defaultValue: "1,2,3,4,5",
  ),
  Field(
    "Sigmas",
    "Sigmas",
    Datatype.listDoublePrecision,
    description: "List of floating point numbers",
    defaultValue: "1.098098,2.2314124,3.45983,4.00121,5.123412",
  ),
  Field(
    "Enums",
    "enums",
    Datatype.listString,
    description: "List of words",
    defaultValue: "hello, my, name, is, test",
  ),
  Field("First hidden layer", "first-hidden-layer", Datatype.integer,
      description: "First hidden layer ")
];
