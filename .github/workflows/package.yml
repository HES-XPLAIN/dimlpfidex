
name: package

on:
  release:
    types:
      - published
#  workflow_dispatch:
#  push:
#    tags:
#      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  PYTHON_VERSION: '3.11'
  MACOSX_DEPLOYMENT_VERSION: '14.0' # TODO: lower this to latest supported 12.7 (breaks openmp at the moment)

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull submodules
        run: |
          git submodule update --init

      - name: Set up Homebrew (macOS)
        if: runner.os == 'macOS'
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install LLVM and OpenMP (Homebrew) # macOS's llvm does not support -fopenmp
        if: runner.os == 'macOS'
        run: |
          brew install llvm libomp

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.19.1

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
          CIBW_ARCH: auto64
          CIBW_SKIP: "pp* *-win32 *-manylinux_i686 *musllinux* *-manylinux_ppc64le *-manylinux_s390x *-manylinux_aarch64"
          CIBW_BUILD_FRONTEND: build
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=${{ env.MACOSX_DEPLOYMENT_VERSION }} PATH="/opt/homebrew/opt/llvm/bin:$PATH" CC="/opt/homebrew/opt/llvm/bin/clang" CXX="/opt/homebrew/opt/llvm/bin/clang++" LDFLAGS="-L/opt/homebrew/opt/libomp/lib -mmacosx-version-min=${{ env.MACOSX_DEPLOYMENT_VERSION }}" CPPFLAGS="-I/opt/homebrew/opt/libomp/include"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-dist-${{ matrix.os }}-${{ strategy.job-index }}
          path: dist/*.whl

  source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull submodules
        run: |
          git submodule update --init

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          python -m pip install .

      - name: Source archive
        run: |
          python -m build -s

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-dist-source
          path: dist/*

  publish:
    runs-on: ubuntu-latest
    needs: [ build, source ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

#      - name: Publish distribution ðŸ“¦ to Test PyPI
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#          repository-url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ to PyPI
        if: github.event_name == 'release' && github.event.release.target_commitish == 'main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: publish
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            artifact-*
