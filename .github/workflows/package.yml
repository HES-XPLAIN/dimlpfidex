
name: package

on:
  release:
    types:
      - published
#  workflow_dispatch:
#  push:
#    tags:
#      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest] # windows-latest,
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull submodules
        run: |
          git submodule update --init

      - name: Set up GCC (Linux)
        if: runner.os == 'Linux'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64

      - name: Set up GCC (MinGW)
        if: runner.os == 'Windows'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Set up GCC (macOS)
        if: runner.os == 'macOS'
        uses: Dup4/actions-setup-gcc@v1
        with:
          version: latest

      - name: Install cmake
        uses: lukka/get-cmake@latest

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          python -m pip install .

      - name: Compile and Build archives
        run: |
          python -m build -w

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-dist-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*

  source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull submodules
        run: |
          git submodule update --init

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          python -m pip install .

      - name: Source archive
        run: |
          python -m build -s

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-dist-source
          path: dist/*

  publish:
    runs-on: ubuntu-latest
    needs: [ build, source ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

#      - name: Publish distribution ðŸ“¦ to Test PyPI
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#          repository-url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ to PyPI
        if: github.event_name == 'release' && github.event.release.target_commitish == 'main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: publish
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            artifact-*
