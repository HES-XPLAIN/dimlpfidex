
name: build

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        python-version: ["3.11"] #  ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up GCC
        if: runner.os == 'Linux'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64

      - name: Set up MinGW
        if: runner.os == 'Windows'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Set up GCC
        if: runner.os == 'macOS'
        uses: Dup4/actions-setup-gcc@v1
        with:
          version: latest

      - name: Install cmake
        uses: lukka/get-cmake@latest

      - name: Set up Poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install Python dependencies
        run: poetry install

      - name: Create build dir
        if: runner.os != 'Windows'
        run: mkdir -p build

      - name: Create build dir
        if: runner.os == 'Windows'
        run: |
          rm -r build
          mkdir build

      - name: Compile
        if: runner.os != 'Windows'
        run: |
          cd build
          poetry run cmake ..
          poetry run cmake --build .

      - name: Compile
        if: runner.os == 'Windows'
        run: |
          cd build
          $path = (poetry env info | Select-String -Pattern 'Path:\s+(.*)').Matches.Groups[1].Value
          poetry run cmake -G "MinGW Makefiles" -DCMAKE_PREFIX_PATH="$path" ..
          poetry run cmake --build .
